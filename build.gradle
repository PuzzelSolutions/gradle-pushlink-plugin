buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        //classpath 'com.github.townsfolk:gradle-release:1.2'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.3'
    }
}

plugins {
    id 'net.researchgate.release' version '2.6.0'
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.github.ben-manes.versions'

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

group = 'com.puzzel.gradle.plugin'

ext.archivesBaseName = 'gradle-pushlink-plugin'
ext.isSnapshot = version.endsWith("-SNAPSHOT")

repositories {
    jcenter()
    mavenCentral()
    google()
}

dependencies {
    compile localGroovy()
    compile gradleApi()
    compile 'com.android.tools.build:gradle:3.1.3'
    compile 'commons-io:commons-io:2.4'
    compile 'org.apache.httpcomponents:httpclient:4.5.1'
    compile 'org.apache.httpcomponents:httpmime:4.5.1'

    testCompile 'junit:junit:4.12'
}

test {
    testLogging {
        showStandardStreams = true
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

task sourceJar(type: Jar) {
    description = 'An archive of the source code for Maven Central'
    classifier = 'sources'
    from sourceSets.main.groovy
}

task groovydocJar(type: Jar) {
    description = 'An archive of the GroovyDocs for Maven Central'
    classifier = 'javadoc'
    from groovydoc
}

artifacts {
    archives groovydocJar, sourceJar
}

signing {
    sign configurations.archives
}

// Only *require* signing if we are uploading a non snapshot version
gradle.taskGraph.whenReady { taskGraph ->
    tasks.withType(org.gradle.plugins.signing.Sign).all {
        required = taskGraph.hasTask(":uploadArchives") && !isSnapshot
    }
}

install.repositories.mavenInstaller {
    pom.project(pomConfiguration)
    if (signing.signatory) {
        beforeDeployment { signing.signPom(it) }
    }
}

uploadArchives {
    repositories.mavenDeployer {
        if (signing.signatory) {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
        }
        name = 'mavenCentralReleaseDeployer'
        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
            releases(updatePolicy: 'always')
            snapshots(updatePolicy: 'always')
        }
        pom.project(pomConfiguration)
    }
}

release {
    createReleaseTag.dependsOn uploadArchives
}

/**v
 * Create POM config and return for use by other tasks.
 */
def getPomConfiguration() {
    return {
        name 'Gradle Pushlink Plugin'
        packaging 'jar'
        description 'A Gradle plugin for uploading Android apps to Pushlink.'
        url 'https://github.com/PuzzelSolutions/gradle-pushlink-plugin'
        licenses {
            license {
                name 'The MIT License'
                url 'http://www.opensource.org/licenses/mit-license.php'
                distribution 'repo'
            }
        }
        developers {
            developer {
                id 'ahaeber'
                name 'Andreas HÃ¤ber'
                email 'andy@andyandy.info'
            }
        }
        scm {
            connection 'scm:https://x2on@github.com/PuzzelSolutions/gradle-pushlink-plugin'
            developerConnection 'scm:git@github.com/PuzzelSolutions/gradle-pushlink-plugin.git'
            url 'https://github.com/PuzzelSolutions/gradle-pushlink-plugin'
        }
    }
}
